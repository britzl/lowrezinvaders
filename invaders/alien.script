go.property("animation", hash("alien1"))
go.property("score", 20)

local broadcast = require "utils.broadcast"

local COLLISION_RESPONSE = hash("collision_response")
local LEVEL_STARTED = hash("level_started")
local LEVEL_ENDED = hash("level_ended")

-- These values are all shared between all instances of the alien.script
local aliens = {} -- All aliens currently alive
local alive = 0 -- Number of aliens alive
local fire_timestamp = 0 -- Timestamp when the aliens fired
local fire_interval = 1 -- Interval at which the aliens should fire
local vertical_duration = 0.1 -- Default speed of alien movement when moving down
local horizontal_duration = 1.4 -- Default speed of alien movement when moving left/right

--- Is this alien in the front row? (ie nearest the player)
-- @return true if alien is in the front row
local function is_in_front_row()
	local my_pos = go.get_position()
	for _,alien in pairs(aliens) do
		local pos = go.get_position(alien.id)
		if my_pos.x == pos.x and my_pos.y > pos.y then
			return false
		end
	end
	return true
end

--- Get minimum distance from all aliens to the left edge of the screen
-- @return Minimum distance to left edge of screen
local function get_minimum_distance_to_left_edge()
	local distance = 64
	for _,alien in pairs(aliens) do
		local pos = go.get_position(alien.id)
		distance = math.min(pos.x, distance)
	end
	return distance
end

--- Get minimum distance from all aliens to right edge of the screen
-- @return Minimum distance to the right edge of the screen
local function get_minimum_distance_to_right_edge()
	local distance = 64
	for _,alien in pairs(aliens) do
		local pos = go.get_position(alien.id)
		distance = math.min(64 - pos.x, distance)
	end
	return distance
end

--- Animate the alien to a specific position
local function animate(self, to, duration, easing)
	local co = coroutine.running()
	go.cancel_animations(".", "position")
	go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, to, easing or go.EASING_LINEAR, duration, 0, function()
		coroutine.resume(co)
	end)
	coroutine.yield()
end

--- Adjust the duration based on number of aliens alive and according to a
-- pretty random formula...
-- The fewer aliens alive the shorter the adjusted duration
-- @param duration The duration to adjust
-- @return The adjusted duration
local function adjust_duration(duration)
	return duration * (3 + (alive / 5)) / 2
end

-- Move down, end game if moving below bottom edge of screen
local function move_down(self)
	pos = go.get_position()
	pos.y = pos.y - 2
	animate(self, pos, adjust_duration(self.vertical_duration))
	if pos.y <= 0 then
		msg.post("invaders:/invaders", "game_over")
	end
end

-- Move left/right a certain distance. Adjust the speed of movement
-- based on distance to travel and number of aliens alive
local function move_left_right(self, distance)
	pos = go.get_position()
	pos.x = pos.x + distance
	animate(self, pos, adjust_duration(self.horizontal_duration * math.abs(distance) / 64))
end

--- Start the movement loop for this alien
-- The alien will drop down from outside the screen and then start moving
-- to the right, down, left and down on and on until deleted
local function move(self)
	local margin = 4
	local down = vmath.vector3(0, -2, 0)

	coroutine.wrap(function()
		-- let the alien drop in from above
		local pos = go.get_position()
		animate(self, pos + vmath.vector3(0, -29, 0), 1, go.EASING_OUTEXPO)

		self.shoot = true
		while true do
			move_left_right(self, get_minimum_distance_to_right_edge() - margin)
			move_down(self)
			move_left_right(self, -get_minimum_distance_to_left_edge() + margin)
			move_down(self)
		end
	end)()
end

function init(self)
	-- set initial hori
	self.horizontal_duration = horizontal_duration
	self.vertical_duration = vertical_duration
	
	-- start playing animation depending on which type this alien is
	msg.post("#sprite", "play_animation", { id = self.animation })
	-- put alien in list of aliens that are alive
	table.insert(aliens, { id = go.get_id() })
	alive = alive + 1
	
	broadcast.register(LEVEL_STARTED)
	broadcast.register(LEVEL_ENDED)
end

function final(self)
	-- remove from list of aliens that are alive
	local my_id = go.get_id()
	for k,alien in pairs(aliens) do
		if alien.id == my_id then
			aliens[k] = nil
		end
	end
	-- decrease alive counter and trigger level complete if no aliens are alive
	alive = alive - 1
	if alive == 0 then
		msg.post("invaders:/invaders", "level_completed")
	end
	broadcast.unregister(LEVEL_STARTED)
	broadcast.unregister(LEVEL_ENDED)
end

function update(self, dt)
	-- is the alien allowed to shoot?
	if self.shoot
	and socket.gettime() > (fire_timestamp + fire_interval)	-- has enough time elapsed since the last time an alien fired a bullet?
	and math.random(1,10) == 1								-- some randomness
	and is_in_front_row() 									-- is the alien in the front row?
	then
		fire_timestamp = socket.gettime()
		factory.create("factories#alienbullet", go.get_position() + vmath.vector3(0, -2, 0), nil, { direction = -1 })
	end
end

function on_message(self, message_id, message, sender)
	if message_id == COLLISION_RESPONSE then
		-- I died!
		factory.create("factories#explosion", go.get_position())
		go.delete()
		msg.post("invaders:/hud", "increase_score", { amount = self.score })
	elseif message_id == LEVEL_ENDED then
		-- end animation and stop shooting when the level has ended
		go.cancel_animations(".", "position")
		self.shoot = false
	elseif message_id == LEVEL_STARTED then
		-- set initial speed, modify by level
		self.horizontal_duration = horizontal_duration / message.level
		self.vertical_duration = vertical_duration / message.level
		-- start movement loop
		move(self)	
	end
end
